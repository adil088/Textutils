{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlfor","TextForm","useState","text","setText","style","color","heading","placeholder","value","onChange","event","target","backgroundColor","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","replace","document","getElementById","select","navigator","clipboard","writeText","split","filter","element","Alert","height","alert","role","word","lower","charAt","slice","capitalize","msg","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.cb3ac7e0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"Home\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"Home\">\r\n                Home\r\n              </a>\r\n            </li>\r\n          </ul>\r\n          <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.toggleMode}\r\n              type=\"checkbox\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label className=\"form-check-label\" htmlfor=\"flexSwitchCheckDefault\">\r\n              Enabled Dark Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\",\r\n  aboutText: \"About\",\r\n};\r\n","import React, {useState} from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick= ()=>{\r\n    let newText = text.toUpperCase();\r\n    setText(newText)\r\n    props.showAlert(\"Converted to Uppercase\", \"success\");\r\n  }\r\n  const handleLowClick= ()=>{\r\n    let newText = text.toLowerCase();\r\n    setText(newText)\r\n    props.showAlert(\"Converted to Lowercase\", \"success\");\r\n  }\r\n  const handlePuncs=()=>{\r\n    let puncs = /[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]/g;\r\n    let newText = text.replace(puncs,'');\r\n    setText(newText)\r\n    props.showAlert(\"Punctuations has been removed\", \"success\");\r\n  }\r\n  const handleCopy=()=>{\r\n    let text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Copied to Clipboard\", \"success\");\r\n  }\r\n  const handleClear= ()=>{\r\n    let newText = '';\r\n    setText(newText)\r\n    props.showAlert(\"Clear\", \"success\");\r\n  }\r\n  const handleOnChange=(event)=>{\r\n    setText(event.target.value);\r\n  }\r\n\r\n  const [text, setText] = useState('');\r\n  return (\r\n    <>\r\n    <div className=\"container\" style= {{color: props.mode==='dark'?'white':'black'}}>\r\n      <h1>{props.heading}</h1>\r\n      <div className=\"mb-3\">\r\n        <textarea className=\"form-control\" placeholder=\"Enter text here\" value={text} onChange={handleOnChange} style= {{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'black'}} id=\"myBox\" rows=\"8\">\r\n        </textarea>\r\n      </div>\r\n      <button disabled={text.length===0} className=\"btn btn-primary mx-1 my- 1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n      <button disabled={text.length===0} className=\"btn btn-primary mx-1 my- 1\" onClick={handleLowClick}>Convert to Lowercase</button>\r\n      <button disabled={text.length===0} className=\"btn btn-primary mx-1 my- 1\" onClick={handlePuncs}>Remove Punctuations</button>\r\n      <button disabled={text.length===0} className=\"btn btn-primary mx-1 my- 1\" onClick={handleCopy}>Copy Text</button>\r\n      <button disabled={text.length===0} className=\"btn btn-primary mx-1 my- 1\" onClick={handleClear}>Clear</button>\r\n    </div>\r\n    <div className=\"container my-3\" style= {{color: props.mode==='dark'?'white':'black'}}>\r\n      <h2>Your text summary</h2>\r\n      <p>{text.split(\" \").filter((element)=>{return element.length !== 0}).length} words and {text.length} charecters</p>\r\n      <h2>Preview</h2>\r\n      <p>{text}</p>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n  const capitalize=(word)=>{\r\n      const lower = word.toLowerCase();\r\n      return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n  return (\r\n    <div style={{height: '50px'}}>\r\n    {props.alert &&\r\n        <div\r\n          className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n          role=\"alert\"\r\n        >\r\n          <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>}\r\n      </div>\r\n    )\r\n}\r\n","import \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport Alert from \"./components/Alert\";\nimport React, { useState } from \"react\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); // Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Dark Mode\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Light Mode\";\n    }\n  };\n\n  return (\n    <>\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n            <TextForm\n              showAlert={showAlert}\n              heading=\"Enter the text to analyze Below.\"\n              mode={mode}\n            />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}